// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Constraint interface {
	IsConstraint()
}

type API struct {
	ID      string              `json:"id"`
	Name    string              `json:"name"`
	Deploys []*Deploy           `json:"deploys"`
	Objects []*ObjectDefinition `json:"objects"`
}

type DefineAPI struct {
	APIID         string `json:"apiId"`
	RawDefinition string `json:"rawDefinition"`
}

type Deploy struct {
	ID    string      `json:"id"`
	APIID string      `json:"apiID"`
	Env   Environment `json:"env"`
}

type DeployAPI struct {
	APIID string      `json:"apiID"`
	Env   Environment `json:"env"`
}

type FieldDefinition struct {
	Name        string       `json:"name"`
	Type        string       `json:"type"`
	CustomType  *string      `json:"customType"`
	Constraints []Constraint `json:"constraints"`
}

type FloatConstraint struct {
	Min *float64 `json:"min"`
	Max *float64 `json:"max"`
}

func (FloatConstraint) IsConstraint() {}

type IntConstraint struct {
	Min *int `json:"min"`
	Max *int `json:"max"`
}

func (IntConstraint) IsConstraint() {}

type NewAPI struct {
	Name string `json:"name"`
}

type ObjectDefinition struct {
	Fields     []*FieldDefinition     `json:"fields"`
	Operations []*OperationDefinition `json:"operations"`
}

type OperationDefinition struct {
	Type   OperationType `json:"type"`
	Sort   *SortOrder    `json:"sort"`
	Filter []string      `json:"filter"`
}

type SortDefinition struct {
	Field string    `json:"field"`
	Order SortOrder `json:"order"`
}

type StringLengthConstraint struct {
	Min *int `json:"min"`
	Max *int `json:"max"`
}

func (StringLengthConstraint) IsConstraint() {}

type Environment string

const (
	EnvironmentSandbox    Environment = "SANDBOX"
	EnvironmentStaging    Environment = "STAGING"
	EnvironmentProduction Environment = "PRODUCTION"
)

var AllEnvironment = []Environment{
	EnvironmentSandbox,
	EnvironmentStaging,
	EnvironmentProduction,
}

func (e Environment) IsValid() bool {
	switch e {
	case EnvironmentSandbox, EnvironmentStaging, EnvironmentProduction:
		return true
	}
	return false
}

func (e Environment) String() string {
	return string(e)
}

func (e *Environment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Environment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Environment", str)
	}
	return nil
}

func (e Environment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OperationType string

const (
	OperationTypeCreate OperationType = "CREATE"
	OperationTypeUpdate OperationType = "UPDATE"
	OperationTypeRead   OperationType = "READ"
	OperationTypeList   OperationType = "LIST"
)

var AllOperationType = []OperationType{
	OperationTypeCreate,
	OperationTypeUpdate,
	OperationTypeRead,
	OperationTypeList,
}

func (e OperationType) IsValid() bool {
	switch e {
	case OperationTypeCreate, OperationTypeUpdate, OperationTypeRead, OperationTypeList:
		return true
	}
	return false
}

func (e OperationType) String() string {
	return string(e)
}

func (e *OperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationType", str)
	}
	return nil
}

func (e OperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
