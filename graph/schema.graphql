# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type API {
  id: ID!
  name: String!
  deploys: [Deploy!]!
  definition: APIDefinition!
}

enum Environment {
  SANDBOX
  STAGING
  PRODUCTION
}

type Deploy {
  id: ID!
  apiID: ID!
  env: Environment!
}

type APIDefinition {
  name: String!
  fields: [FieldDefinition!]!
  operations: [OperationDefinition!]!
}

type OperationDefinition {
  type: OperationType!
  sort: [SortDefinition!]
  filter: [String!]
}

enum OperationType {
  CREATE
  UPDATE
  READ
  LIST
}

type SortDefinition {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

type FieldDefinition {
  name: String!
  type: Type!
  customType: String
  optional: Boolean
  list: Boolean
  constraints: Constraint!
}

enum Type {
  FLOAT
  INT
  BOOLEAN
  STRING
}

type Constraint {
  # type Int
  minInt: Int
  maxInt: Int
  # type Float
  minFloat: Float
  maxFloat: Float
  # type String
  regex: String
  # type String, List
  minLength: Int
  maxLength: Int
}

type Auth {
  authenticationType: AuthenticationType!
  readPolicy: AuthPolicy!
  writePolicy: AuthPolicy!
}

enum AuthenticationType {
  BUILT_IN
}

type AuthPolicy {
  type: AuthPolicyType!
  # type ATTRIBUTE_MATCH
  userAttribute: String
  objectAttribute: String
}

enum AuthPolicyType {
  CREATED_BY
  ATTRIBUTE_MATCH
  CUSTOM
}

input AuthPolicyInput {
  type: AuthPolicyType!
  # type ATTRIBUTE_MATCH
  userAttribute: String
  objectAttribute: String
}

type Query {
  # TODO(gracew): page this
  api(id: ID!): API
  apis: [API!]!

  auth(apiID: ID!): Auth

  testTokens(apiID: ID!): [String!]!
}

input DefineAPIInput {
  # TODO(gracew): in the future may want to send an already parsed representation?
  rawDefinition: String!
}

input UpdateAPIInput {
  apiID: ID!
  # TODO(gracew): in the future may want to send an already parsed representation?
  rawDefinition: String!
}

input DeployAPIInput {
  apiID: ID!
  env: Environment!
}

input AuthAPIInput {
  apiID: ID!
  authenticationType: AuthenticationType!
  readPolicy: AuthPolicyInput!
  writePolicy: AuthPolicyInput!
}

input TestToken {
  apiID: ID!
  label: String!
  token: String!
}

type Mutation {
  defineAPI(input: DefineAPIInput!): API!
  updateAPI(input: UpdateAPIInput!): API!
  authAPI(input: AuthAPIInput!): Boolean!
  deployAPI(input: DeployAPIInput!): Deploy!

  addTestToken(input: TestToken!): Boolean!
}
