# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type API {
  id: ID!
  name: String!
  deploys: [Deploy!]!
  definition: APIDefinition!
}

enum Environment {
  SANDBOX
  STAGING
  PRODUCTION
}

type Deploy {
  id: ID!
  apiID: ID!
  env: Environment!
}

type APIDefinition {
  name: String!
  fields: [FieldDefinition!]!
  operations: [OperationDefinition!]!
}

type OperationDefinition {
  type: OperationType!
  sort: [SortDefinition!]
  filter: [String!]
}

enum OperationType {
  CREATE
  UPDATE
  READ
  LIST
}

type CustomLogic {
  apiID: ID!
  # TODO(gracew): limit this to a CustomLogicOperationType with options CREATE, UPDATE, DELETE
  operationType: OperationType!
  language: Language!
  before: String
  after: String
}

enum Language {
  JAVASCRIPT
  PYTHON
}

type SortDefinition {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

type FieldDefinition {
  name: String!
  type: Type!
  customType: String
  optional: Boolean
  list: Boolean
  constraints: Constraint
  customLogicPopulated: Boolean
}

enum Type {
  FLOAT
  INT
  BOOLEAN
  STRING
}

type Constraint {
  # type Int
  minInt: Int
  maxInt: Int
  # type Float
  minFloat: Float
  maxFloat: Float
  # type String
  regex: String
  # type String, List
  minLength: Int
  maxLength: Int
}

type Auth {
  id: ID!
  apiID: ID!
  authenticationType: AuthenticationType!
  readPolicy: AuthPolicy!
  writePolicy: AuthPolicy!
}

enum AuthenticationType {
  BUILT_IN
}

type AuthPolicy {
  type: AuthPolicyType!
  # type ATTRIBUTE_MATCH
  userAttribute: String
  objectAttribute: String
}

enum AuthPolicyType {
  CREATED_BY
  ATTRIBUTE_MATCH
  CUSTOM
}

enum DeployStep {
  GENERATE_CODE
  BUILD_IMAGE
  LAUNCH_CONTAINER
  LAUNCH_CUSTOM_LOGIC_CONTAINER
}

enum DeployStatus {
  IN_PROGRESS
  COMPLETE
  FAILED
}

type DeployStepStatus {
  deployID: ID!
  step: DeployStep!
  status: DeployStatus!
}

type DeployStatusResponse {
  steps: [DeployStepStatus!]!
}

type TestTokenResponse {
  testTokens: [TestToken!]!
}

type TestToken {
  label: String!
  token: String!
}

type Query {
  # TODO(gracew): page this
  api(id: ID!): API
  apis: [API!]!
  deployStatus(deployID: ID!): DeployStatusResponse!

  auth(apiID: ID!): Auth
  customLogic(apiID: ID!): [CustomLogic!]!

  testTokens: TestTokenResponse!
}

input DefineAPIInput {
  # TODO(gracew): in the future may want to send an already parsed representation?
  rawDefinition: String!
}

input UpdateAPIInput {
  id: ID!
  # TODO(gracew): in the future may want to send an already parsed representation?
  rawDefinition: String!
}

input DeployAPIInput {
  apiID: ID!
  # TODO(gracew): this should be provisioned by the server, but this is easier for now...
  deployID: ID!
  env: Environment!
}

input AuthAPIInput {
  apiID: ID!
  authenticationType: AuthenticationType!
  readPolicy: AuthPolicyInput!
  writePolicy: AuthPolicyInput!
}

input AuthPolicyInput {
  type: AuthPolicyType!
  # type ATTRIBUTE_MATCH
  userAttribute: String
  objectAttribute: String
}

input SaveCustomLogicInput {
  apiID: ID!
  operationType: OperationType!
  language: Language!
  before: String
  after: String
}

input TestTokenInput {
  label: String!
  token: String!
}

type Mutation {
  defineAPI(input: DefineAPIInput!): API!
  updateAPI(input: UpdateAPIInput!): API!
  authAPI(input: AuthAPIInput!): Boolean!
  deployAPI(input: DeployAPIInput!): Deploy!
  deleteAPI(id: ID!): Boolean!
  saveCustomLogic(input: SaveCustomLogicInput!): Boolean!

  addTestToken(input: TestTokenInput!): TestToken!
}
